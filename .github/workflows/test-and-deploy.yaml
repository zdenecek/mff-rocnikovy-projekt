name: Test and Deploy

on: 
  push:
    branches:
      - main
      - 'release/**'

# Assumes a pm2 process is running already, with the name matrika-api
# If not, you can start it manually one time - pm2 start npm --name "matrika-api" ./backend/bin/www
# It is easier than to handle this in the workflow for now.

jobs:

  test_backend:
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:latest
        ports:
          - 27018:27017
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      - name: Download wait-for-it.sh
        run: |
            wget https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh 
            chmod +x wait-for-it.sh
      - name: Wait for MongoDB
        run: ./wait-for-it.sh localhost:27018 --timeout=60 --strict -- echo "MongoDB is up"
      - name: Wait for MySQL
        run: ./wait-for-it.sh localhost:3306 --timeout=60 --strict -- echo "Mysql is up"
      - name: Run tests
        working-directory: ./backend
        env:
          MONGO_URL: mongodb://localhost:27018/testdb
          DB_URL: mysql://root:root@localhost:3306/testdb
        run: npm test
  deploy:

    needs: test_backend
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/')
    env:
      deployment_name: 'dev'
      frontend_env_secret: 'FRONTEND_ENV'
      backend_env_secret: 'BACKEND_ENV'
    steps:
      - name: Get Secrets
        uses: bitwarden/sm-action@v2
        with:
          access_token: ${{ secrets.BW_ACCESS_TOKEN }}
          base_url: https://vault.bitwarden.com
          secrets: |
            48256f1a-e560-48a7-b838-b17e017d4689 > BACKEND_ENV
            df315311-36c4-4307-a697-b17e017d84f4 > FRONTEND_ENV
            7ccc4571-de33-437a-9216-b17e0178081e > VPS_HOST
            b9a82ebc-6cd0-4b16-9669-b17e01781aae > VPS_PASSWORD
            4668236a-4ec6-43dd-acce-b17e01783442 > VPS_SSH_PORT
            86141b0a-dd09-4b0d-a573-b17e01785834 > VPS_USERNAME
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: ./backend
      - name: Add environment information to frontend
        working-directory: ./frontend
        run: |
          echo "VITE_APP_VERSION=${{ steps.package-version.outputs.current-version }} (on ${{ github.ref_name }})"  >.env
          echo "${{ env[env.frontend_env_secret] }}" | sed 's/\\n/\n/g' >>.env
          
          echo "VITE_BUILD_TIME=$(date)"  >>.env
          - name: Add environment information to backend
            working-directory: ./api
            run: echo "${{  env[env.backend_env_secret] }}" | sed 's/\\n/\n/g' >.env
          - name: Build frontend
            working-directory: ./frontend
            run: |
              npm install
              npm run build --production
          - name: Transfer to VPS
            uses: appleboy/scp-action@master
            with:
              host: ${{ env.VPS_HOST }}
              username: ${{ env.VPS_USERNAME }}
              password: ${{ env.VPS_PASSWORD }}
              port: ${{ env.VPS_SSH_PORT }}
              source: "frontend/dist, api/*, scraper/"
              target: "/home/${{ env.VPS_USERNAME }}/${{ env.deployment_name }}/"
          - name: Restart server
            uses: appleboy/ssh-action@master
            with:
              host: ${{ env.VPS_HOST }}
              username: ${{ env.VPS_USERNAME }}
              password: ${{ env.VPS_PASSWORD }}
              port: ${{ env.VPS_SSH_PORT }}
              script: |
                DIR="/home/${{ env.VPS_USERNAME }}/${{ env.deployment_name }}"
                cd $DIR
                mv frontend/dist frontend1
                rm -rf frontend
                mv frontend1 frontend
                cd $DIR/api
                npm install --production
                # Check if the pm2 process exists and either restart it or start a new one
                if pm2 show ${{ env.deployment_name }} > /dev/null; then
                    echo "Restarting existing PM2 process"
                    pm2 restart ${{ env.deployment_name }}
                else
                    echo "Starting new PM2 process"
                    pm2 start index.js --name ${{ env.deployment_name }} --log /var/log/rr/${{ env.deployment_name }}/api-pm2.log
                    pm2 save
                fi


